generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  username     String    @unique
  name         String?
  email        String    @unique
  password     String
  rating       Int       @default(1200)
  gamesAsWhite Game[]    @relation("GamesAsWhite")
  gamesAsBlack Game[]    @relation("GamesAsBlack")
  createdAt    DateTime  @default(now())
  lastLogin    DateTime?

  @@index([rating])
}

model Game {
  id            String      @id @default(cuid())
  whitePlayerId String?
  blackPlayerId String?
  whitePlayer   User?       @relation("GamesAsWhite", fields: [whitePlayerId], references: [id])
  blackPlayer   User?       @relation("GamesAsBlack", fields: [blackPlayerId], references: [id])
  status        GameStatus
  result        GameResult?
  timeControl   Int         @default(10)
  moves         Move[]      @relation("GameMoves")
  pgn           String?
  currentFen    String?
  startAt       DateTime    @default(now())
  endAt         DateTime?
  opening       String?
  event         String?

  @@index([id, result])
}

model Move {
  id        String   @id @default(cuid())
  gameId    String
  game      Game     @relation("GameMoves", fields: [gameId], references: [id])
  move      String
  moveNum   Int
  fenAfter  String?
  createdAt DateTime @default(now())

  @@index([gameId, moveNum])
}

enum GameStatus {
  OPEN
  IN_PROGRESS
  FINISHED
}

enum GameResult {
  WHITE
  BLACK
  DRAW
  WHITE_TIMEOUT
  BLACK_TIMEOUT
  WHITE_ABANDONED
  BLACK_ABANDONED
}
